{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#compose-charts","title":"Compose Charts","text":"<p>Compose Charts is a an animated &amp; flexible practical charts multiplatform library for jetpack compose</p> <p> </p> <p> </p>"},{"location":"animation-mode/","title":"Animation Modes","text":"<p>In Row/Column/Line charts you can set running animations at the same time types:</p> Mode Description <code>OneByOne</code> Animations will run one by one, for example in line charts, lines will be drawn after previous line animation finished. <code>Together</code> By default, animations will run async, but you can set delay for next animations <p>Example</p> <pre><code>LineChart(\n    ...,\n    animationMode = AnimationMode.OneByOne\n)\n\nLineChart(\n   ...,\n   animationMode = AnimationMode.Together(delayBuilder = { index-&gt; index*200 })\n)\n</code></pre> <p>In the second example, every animation will be start 200ms after previous animations start.</p>"},{"location":"todos/","title":"Todos","text":"<ol> <li> Add Candle Stick Chart</li> <li> Add Circle Progress Chart</li> <li> MultiPlatform Support</li> </ol>"},{"location":"chart-properties/axis/","title":"Axis Properties","text":"Property Type Default Description <code>enabled</code> Boolean <code>true</code> specifies axis line visibility <code>style</code> StrokeStyle <code>StrokeStyle.Normal</code> specifies axis line style <code>color</code> Color <code>Color.Gray</code> specifies axis line color <code>thickness</code> Dp <code>(0.5).dp</code> specifies axis line stroke width <code>lineCount</code> Int <code>5</code> specifies count of axis lines <p>Example</p> <pre><code>val axisProperties = AxisProperties(\nenabled = true,\nstyle = StrokeStyle.Dashed(intervals = floatArrayOf(10f,10f)),\ncolor = Color.Gray,\nthickness = (.5).dp,\nlineCount = 5\n)\n</code></pre>"},{"location":"chart-properties/bars/","title":"Bar Properties","text":"<p>Usage</p> <p>In Column/Row Charts you can set bar properties with this property</p> Property Type Default Description <code>thickness</code> Dp <code>20</code> specifies bar width <code>spacing</code> Dp <code>4</code> specifies space between data bars when you have more than one bar in a data <code>cornerRadius</code> Bars.Data.Radius <code>Bars.Data.Radius.None</code> specifies space between data bars when you have more than one bar in a data <code>style</code> DrawStyle <code>DrawStyle.Fill</code> specifies bar style <p>Example</p> <pre><code>val barProperties = BarProperties(\nthickness = 15.dp,\nspacing = 4.dp,\ncornerRadius = Bars.Data.Radius.Circular(6.dp),\nstyle = DrawStyle.Fill\n)\n</code></pre>"},{"location":"chart-properties/dividers/","title":"Divider Properties","text":"<p>Usage</p> <p>In every chart you can set properties of dividers between labels and chart, indicators and chart</p> Property Type Default Description <code>enabled</code> Boolean <code>true</code> specifies dividers visibility <code>xAxisProperties</code> LineProperties <code>LineProperties(..)</code> specifies horizontal divider properties <code>yAxisProperties</code> LineProperties <code>LineProperties(..)</code> specifies vertical divider properties <p>Example</p> <pre><code>val dividerProperties = DividerProperties(\n    enabled = true,\n    xAxisProperties = LineProperties(\n    ...\n    ),\n    yAxisProperties = LineProperties(\n    ...\n    )\n)\n</code></pre>"},{"location":"chart-properties/dots/","title":"Dot Properties]","text":"<p>Usage</p> <p>In Line Charts you can set data dot shape properties with this property</p> Property Type Default Description <code>enabled</code> Boolean <code>false</code> specifies dots visibility <code>radius</code> Dp <code>3.dp</code> specifies dot size <code>color</code> Brush <code>SolidColor(Color.Unspecified)</code> specifies dot color <code>strokeWidth</code> Dp <code>2.dp</code> specifies dot stroke width <code>strokeColor</code> Brush <code>SolidColor(Color.Unspecified)</code> specifies dot stroke color <code>strokeStyle</code> StrokeStyle <code>StrokeStyle.Normal</code> specifies dot stroke style <code>animationEnabled</code> Boolean <code>true</code> set <code>false</code> if you want to show dots without delay and animation <code>animationSpec</code> AnimationSpec <code>tween(300)</code> specifies dots visibility animation spec <p>Example</p> <pre><code>val dotProperties = DotProperties(\n    enabled = true,\n    radius = 4.dp,\n    color = SolidColor(Color.Red),\n    strokeWidth = 3.dp,\n    strokeColor = Color.White,\n    strokeStyle = StrokeStyle.Normal,\n    animationEnabled = true,\n    animationSpec = tween(500)\n)\n</code></pre>"},{"location":"chart-properties/grid-lines/","title":"Grid Properties","text":"<p>Usage</p> <p>In every chart you can set properties of grid lines</p> Property Type Default Description <code>enabled</code> Boolean <code>true</code> specifies grid lines visibility <code>xAxisProperties</code> AxisProperties <code>AxisProperties(..)</code> specifies grid horizontal lines properties <code>yAxisProperties</code> AxisProperties <code>AxisProperties(..)</code> specifies grid vertical lines properties <p>Example</p> <p><code>kotlin linenums=\"1\"     val gridProperties = GridProperties(         enabled = true,         xAxisProperties = AxisProperties(             ...         ),         yAxisProperties = AxisProperties(             ...         )     )</code></p>"},{"location":"chart-properties/indicators/","title":"Indicator Properties","text":"<p>Usage</p> <p>In every chart you can set properties of counters next to the chart</p> Property Type Default Description <code>enabled</code> Boolean <code>true</code> specifies indicator visiblity <code>textStyle</code> TextStyle <code>TextStyle.Default</code> specifies counter style <code>count</code> IndicatorCount <code>IndicatorCount.CountBased(5)</code> specifies counters type and count <code>position</code> IndicatorPosition <code>Depends on chart</code> specifies indicator position, in line &amp; column charts can be: start or end, in line charts can be: top or bottom <code>padding</code> Dp <code>12.dp</code> specifies indicator area padding with chart area <code>contentBuilder</code> (Double) -&gt; String <code>{ \"%.2f\".format(it) }</code> specifies counter content creation template <code>indicators</code> List <code>emptyList()</code> overrides chart indicators <p>Example</p> Line &amp; Column ChartRow Chart <pre><code>val indicatorProperties = HorizontalIndicatorProperties(\n    enabled = true,\n    textStyle = MaterialTheme.typography.labelSmall,\n    count = IndicatorCount.CountBased(count = 5),\n    position = IndicatorPosition.Horizontal.End,\n    padding = 32.dp,\n    contentBuilder = { indicator -&gt;\n        \"%.2f\".format(indicator) + \" Million\"\n    },\n    indicators = listOf(10.0,50.0,30.0)\n)\n</code></pre> <pre><code>val indicatorProperties = VerticalIndicatorProperties(\n    enabled = true,\n    textStyle = MaterialTheme.typography.labelSmall,\n    count = IndicatorCount.CountBased(count = 5),\n    position = IndicatorPosition.Vertical.Top,\n    padding = 32.dp,\n    contentBuilder = { indicator -&gt;\n        \"%.2f\".format(indicator) + \" Million\"\n    }\n)\n</code></pre>"},{"location":"chart-properties/indicators/#indicators-bases","title":"Indicators Bases","text":"<p>You can specify type of indicator counts, we have two type: CountBased, StepBased</p> <ul> <li> <p><code>CountBased</code>: it will receive a count number and will divide &amp; calculate and in the end it will show the requested count of indicators.</p> </li> <li> <p><code>StepBased</code>: it will receive a stepBy value and will split step by given value until it reach min value, for example if (max value = 20, min value = -10) and stepBy value is 5, the indicators will be: 20,15,10,5,0,-5,-10</p> </li> </ul>"},{"location":"chart-properties/label-helpers/","title":"LabelHelper Properties","text":"<p>Usage</p> <p>In every chart you can set properties of the labels helper which positioned in top of chart</p> Property Type Default Description <code>enabled</code> Boolean <code>true</code> specifies label helpers visibility <code>textStyle</code> TextStyle <code>TextStyle.Default</code> specifies label helper textStyle <p>Example</p> <pre><code>val labelHelperProperties = LabelHelperProperties(\n    enabled = true,\n    textStyle = MaterialTheme.typography.labelMedium\n)\n</code></pre>"},{"location":"chart-properties/labels/","title":"Label Properties","text":"<p>Usage</p> <p>In every chart you can set properties of the labels (Apr, Jan, ...)</p> Property Type Default Description <code>enabled</code> Boolean <code>true</code> specifies labels visibility <code>textStyle</code> TextStyle <code>TextStyle.Default</code> specifies label textStyle <code>verticalPadding</code> Dp <code>12.dp</code> specifies vertical padding of labels area <code>labels</code> List <code>emptyList()</code> overrides the chart labels <code>builder</code> Composable Function <code>null</code> build the every label component <code>rotation</code> LabelProperties.Rotation <code>LabelProperties.Rotation()</code> manage the labels rotation on size conflicts <p>Example</p> <pre><code>val labelProperties = LabelProperties(\n    enabled = true,\n    textStyle = MaterialTheme.typography.labelSmall,\n    verticalPadding = 16.dp,\n    labels = listOf(\"Apr\",\"Mar\",...),\n    builder = {modifier,label,shouldRotate,index-&gt;\n        Text(modifier=modifier,text=label)\n    }\n)\n</code></pre>"},{"location":"chart-properties/labels/#label-rotation","title":"Label Rotation","text":"Property Type Default Description <code>mode</code> Rotation.Mode <code>Mode.IfNecessary</code> specifies rotation mode <code>degree</code> Float <code>-45f</code> specifies rotation degree <code>padding</code> Dp? <code>null</code> specifies padding of rotated labels <p>Example</p> <pre><code>val labelProperties = LabelProperties(\n    enabled = true,\n    textStyle = MaterialTheme.typography.labelSmall,\n    verticalPadding = 16.dp,\n    rotation = Rotation(\n        mode = LabelProperties.Rotation.Mode.Force,\n        degree = -45f\n    )\n)\n</code></pre>"},{"location":"chart-properties/lines/","title":"Line Properties","text":"Property Type Default Description <code>enabled</code> Boolean <code>true</code> specifies axis line visibility <code>style</code> StrokeStyle <code>StrokeStyle.Normal</code> specifies axis line style <code>color</code> Color <code>Color.Gray</code> specifies axis line color <code>thickness</code> Dp <code>(0.5).dp</code> specifies axis line stroke width <p>Example</p> <pre><code>val lineProperties = LineProperties(\n    enabled = true,\n    style = StrokeStyle.Dashed(intervals = floatArrayOf(10f,10f)),\n    color = Color.Gray,\n    thickness = (.5).dp,\n)\n</code></pre>"},{"location":"chart-properties/popups/","title":"Popup Properties","text":"<p>Usage</p> <p>In every chart you can set properties of popup which shown when user click or drag on chart</p> Property Type Default Description <code>enabled</code> Boolean <code>true</code> specifies popup visibility <code>animationSpec</code> AnimationSpec <code>tween(400)</code> specifies popup visibility animation spec <code>duration</code> Long <code>1500</code> in column/row charts, specifies how long the popup will be visible <code>textStyle</code> TextStyle <code>TextStyle.Default</code> specifies popup text style <code>containerColor</code> Color <code>Color(0xff313131)</code> specifies popup background color <code>cornerRadius</code> Dp <code>6.dp</code> specifies popup corner radius <code>contentHorizontalPadding</code> Dp <code>4.dp</code> specifies popup horizontal padding <code>contentVerticalPadding</code> Dp <code>2.dp</code> specifies popup vertical padding <code>mode</code> PopupProperties.Mode <code>Mode.Normal</code> specifies popup visibility mode ( you can pass PointMode to make popup visible just on points ) <code>contentBuilder</code> (Int,Int,Double)-&gt;String <code>{ \"%.2f\".format(it) }</code> gives data index, value index and value and expect string to be returned ( specifies popup content ) <p>Tip</p> <p>In line charts your can set specific popup properties for each line, for example you can disable one of lines popup and e.g.</p> <p>Example</p> <pre><code>val popupProperties = PopupProperties(\n    enabled = true,\n    animationSpec = tween(300),\n    duration = 2000L,\n    textStyle = MaterialTheme.typography.labelSmall,\n    containerColor = Color.White,\n    cornerRadius = 8.dp,\n    contentHorizontalPadding = 4.dp,\n    contentVerticalPadding = 2.dp,\n    contentBuilder = { dataIndex, valueIndex, value-&gt;\n        // data index: which data? (when you have more than one data item in your chart)\n        // value index: which value?\n        value.format(1)+\" Million\"\n    }\n)\n</code></pre>"},{"location":"charts/column-chart/","title":"Column Chart","text":"<pre><code>ColumnChart(\n    modifier = Modifier.fillMaxSize().padding(horizontal = 22.dp),\n    data = remember {\n        listOf(\n            Bars(\n                label = \"Jan\",\n                values = listOf(\n                    Bars.Data(label = \"Linux\", value = 50.0, color = Brush.verticalGradient(...),\n                    Bars.Data(label = \"Windows\", value = 70.0, color = SolidColor(Color.Red))\n                ),\n            ),\n            Bars(\n                label = \"Feb\",\n                values = listOf(\n                    Bars.Data(label = \"Linux\", value = 80.0, color = Brush.verticalGradient(...),\n                    Bars.Data(label = \"Windows\", value = 60.0, color = SolidColor(Color.Red))\n                ),\n            )\n        )\n    },\n    barProperties = BarProperties(\n        radius = Bars.Data.Radius.Rectangle(topRight = 6.dp, topLeft = 6.dp),\n        spacing = 3.dp,\n        strokeWidth = 20.dp\n    ),\n    animationSpec = spring(\n        dampingRatio = Spring.DampingRatioMediumBouncy,\n        stiffness = Spring.StiffnessLow\n    ),\n)\n</code></pre>"},{"location":"charts/column-chart/#data-count","title":"Data Count","text":"<p>You can set how many data you want for every bar:</p> <p></p> <pre><code>ColumnChart(\n    data = remember {\n        listOf(\n            Bars(\n                label = \"1\",\n                values = listOf(\n                    Bars.Data(value = 10.0, color = Color.Blue)\n                )\n            ),\n            Bars(\n                label = \"2\",\n                values = listOf(\n                    Bars.Data(value = 20.0, color = Color.Blue)\n                )\n            ),\n            ...\n        )\n    },\n    barProperties = BarProperties(\n        spacing = 1.dp,\n        strokeWidth = 10.dp,\n    ),\n    ...\n)\n</code></pre>"},{"location":"charts/column-chart/#negative-values","title":"Negative Values","text":"<p>You can set negative values for this chart and define max value and min value:</p> <p></p> <pre><code>ColumnChart(\n    data = remember {\n        listOf(\n            Bars(\n                label = \"1\",\n                values = listOf(\n                    Bars.Data(value = -40.0, color = Color.Blue)\n                )\n            ),\n            Bars(\n                label = \"2\",\n                values = listOf(\n                    Bars.Data(value = 50.0, color = Color.Blue)\n                )\n            ),\n            ...\n        )\n    },\n    maxValue = 75.0,\n    minValue = -75.0\n    ...\n)\n</code></pre> <p>By default, max value is the highest value of given data, min value is 0 when there is no value under the zero in given data, otherwise if there is value under zero, min value will be (-maxValue)</p>"},{"location":"charts/line-chart/","title":"Line Chart","text":"<pre><code>LineChart(\n    modifier = Modifier.fillMaxSize().padding(horizontal = 22.dp),\n    data = remember {\n        listOf(\n            Line(\n                label = \"Windows\",\n                values = listOf(28.0, 41.0, 5.0, 10.0, 35.0),\n                color = SolidColor(Color(0xFF23af92)),\n                firstGradientFillColor = Color(0xFF2BC0A1).copy(alpha = .5f),\n                secondGradientFillColor = Color.Transparent,\n                strokeAnimationSpec = tween(2000, easing = EaseInOutCubic),\n                gradientAnimationDelay = 1000,\n                drawStyle = DrawStyle.Stroke(width = 2.dp),\n            )\n        )\n    },\n    animationMode = AnimationMode.Together(delayBuilder = {\n        it * 500L\n    }),\n)\n</code></pre>"},{"location":"charts/line-chart/#zero-line-negative-values","title":"Zero Line &amp; Negative Values","text":"<p>You can set min &amp; max value for all charts and show zero line:</p> <p></p> <pre><code>LineChart(\n    data = remember {\n        listOf(\n            Line(\n                label = \"Temperature\",\n                values = listOf(28.0, 41.0, -5.0, 10.0, 35.0),\n                color = Brush.radialGradient(...)\n            ),\n        )\n    },\n    zeroLineProperties = LineProperties(\n        enabled = true,\n        color = SolidColor(Color.Red),\n    ),\n    minValue = -20.0,\n    maxValue = 100.0\n)\n</code></pre> <p>Max value by default is highest value of chart data and Min value is 0 when there is no value under the zero, otherwise it's the lowest data.</p>"},{"location":"charts/line-chart/#line-color","title":"Line Color","text":"<p>You can set gradient color for lines:</p> <p></p> <pre><code>LineChart(\n    data = remember {\n        listOf(\n            Line(\n                label = \"Linux\",\n                values = listOf(28.0, 41.0, 5.0, 10.0, 35.0),\n                color = Brush.radialGradient(...)\n            ),\n        )\n    },\n)\n</code></pre>"},{"location":"charts/line-chart/#line-count","title":"Line Count","text":"<p>You can add how many lines you want:</p> <p></p> <pre><code>LineChart(\n    data = remember {\n        listOf(\n            Line(\n                label = \"Windows\",\n                values = listOf(...),\n                color = Color.Green,\n                curvedEdges = true\n            ),\n            Line(\n                label = \"Linux\",\n                values = listOf(...),\n                color = Color.Orange,\n                curvedEdges = false\n            ),\n            Line(\n                label = \"Linux\",\n                values = listOf(...),\n                color = Color.Blue,\n                curvedEdges = true\n            ),\n        )\n    },\n    ...\n)\n</code></pre>"},{"location":"charts/line-chart/#dots-line-curving","title":"Dots &amp; Line Curving","text":"<p>You can show dots and disable line edge curving:</p> <p></p> <pre><code>LineChart(\n    data = remember {\n        listOf(\n            Line(\n                label = \"Windows\",\n                values = listOf(...),\n                color = Color.Orange,\n                curvedEdges = true,\n                dotProperties = DotProperties(\n                    enabled = true,\n                    color = SolidColor(Color.White),\n                    strokeWidth = 4f,\n                    radius = 7f,\n                    strokeColor = SolidColor(Color.Orange),\n                )\n            ),\n            Line(\n                label = \"Linux\",\n                values = listOf(...),\n                color = Color.Cyan,\n                curvedEdges = false,\n                dotProperties = DotProperties(\n                    ...\n                )\n            ),\n        )\n    },\n    curvedEdges = false\n)\n</code></pre>"},{"location":"charts/line-chart/#stroke-style","title":"Stroke Style","text":"<p>You can make chart line dashed:</p> <p></p> <pre><code>LineChart(\n    data = remember {\n        listOf(\n            Line(\n                label = \"Windows\",\n                values = listOf(...),\n                drawStyle = DrawStyle.Stroke(\n                    width = 3.dp,\n                    strokeStyle = StrokeStyle.Dashed(intervals = floatArrayOf(10f, 10f), phase = 15f)\n                )\n                ...\n            ),\n            Line(\n                label = \"Linux\",\n                values = listOf(...),\n            ),\n        )\n    },\n)\n</code></pre>"},{"location":"charts/line-chart/#fill-color","title":"Fill Color","text":"<p>You can make chart fill color:</p> <p></p> <pre><code>LineChart(\n    data = listOf(\n         Line(\n            label = \"Windows\",\n            values = listOf(...),\n            color = Color.Orange,\n            drawStyle = DrawStyle.Fill,\n            ...\n         ),\n    ),\n)\n</code></pre>"},{"location":"charts/pie-chart/","title":"Pie Chart","text":"<pre><code>var data by remember {\n    mutableStateOf(\n        listOf(\n            Pie(label = \"Android\", data = 20.0, color = Color.Red, selectedColor = Color.Green),\n            Pie(label = \"Windows\", data = 45.0, color = Color.Cyan, selectedColor = Color.Blue),\n            Pie(label = \"Linux\", data = 35.0, color = Color.Gray, selectedColor = Color.Yellow),\n        )\n    )\n}\nPieChart(\n    modifier = Modifier.size(200.dp),\n    data = data,\n    onPieClick = {\n        println(\"${it.label} Clicked\")\n        val pieIndex = data.indexOf(it)\n        data = data.mapIndexed { mapIndex, pie -&gt; pie.copy(selected = pieIndex == mapIndex) }\n    },\n    selectedScale = 1.2f,\n    scaleAnimEnterSpec = spring&lt;Float&gt;(\n        dampingRatio = Spring.DampingRatioMediumBouncy,\n        stiffness = Spring.StiffnessLow\n    ),\n    colorAnimEnterSpec = tween(300),\n    colorAnimExitSpec = tween(300),\n    scaleAnimExitSpec = tween(300),\n    spaceDegreeAnimExitSpec = tween(300),\n    style = Pie.Style.Fill\n)\n</code></pre>"},{"location":"charts/pie-chart/#draw-style","title":"Draw Style","text":"<p>You can change chart style to stroke:</p> <pre><code>PieChart(\n    ...,\nspaceDegree = 7f,\nselectedPaddingDegree = 4f,\nstyle = Pie.Style.Stroke(width = 100f)\n)\n</code></pre>"},{"location":"charts/row-chart/","title":"Row Chart","text":"<pre><code>RowChart(\n    modifier = Modifier.fillMaxSize().padding(horizontal = 22.dp),\n    data = remember {\n        listOf(\n            Bars(\n                label = \"Jan\",\n                values = listOf(\n                    Bars.Data(label = \"Linux\", value = 50.0, color = Brush.verticalGradient(...),\n                    Bars.Data(label = \"Windows\", value = 70.0, color = SolidColor(Color.Red)),\n                ),\n            ),\n            Bars(\n                label = \"Feb\",\n                values = listOf(\n                    Bars.Data(label = \"Linux\", value = 80.0, color = Brush.verticalGradient(...),\n                    Bars.Data(label = \"Windows\", value = 60.0, color = SolidColor(Color.Red)),\n                ),\n            )\n        ),\n    },\n    barProperties = BarProperties(\n        radius = Bars.Data.Radius.Rectangle(topRight = 6.dp, topLeft = 6.dp),\n        spacing = 3.dp,\n        strokeWidth = 20.dp\n    ),\n    animationSpec = spring(\n        dampingRatio = Spring.DampingRatioMediumBouncy,\n        stiffness = Spring.StiffnessLow\n    ),\n)\n</code></pre>"},{"location":"charts/row-chart/#negative-values","title":"Negative Values","text":"<p>You can set negative values for this chart and define max value and min value: </p> <pre><code>RowChart(\n    data = remember {\n        listOf(\n            Bars(\n                label = \"1\",\n                values = listOf(\n                    Bars.Data(value = -40.0, color = Color.Blue)\n                )\n            ),\n            Bars(\n                label = \"2\",\n                values = listOf(\n                    Bars.Data(value = 50.0, color = Color.Blue)\n                )\n            ),\n            ...\n        )\n    },\n    maxValue = 75.0,\n    minValue = -75.0\n    ...\n)\n</code></pre> <p>By default, max value is the highest value of given data, min value is 0 when there is no value under the zero in given data, otherwise if there is value under zero, min value will be (-maxValue)</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#gradle-setup","title":"Gradle Setup","text":"<pre><code>dependencies {\n    implementation (\"io.github.ehsannarmani:compose-charts:latest_version\")\n}\n</code></pre>"}]}